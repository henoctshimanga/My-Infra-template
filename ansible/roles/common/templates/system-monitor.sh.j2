#!/bin/bash
# {{ ansible_managed }}
# System monitoring script for {{ inventory_hostname }}

# Configuration
HOSTNAME="{{ inventory_hostname }}"
ENVIRONMENT="{{ environment }}"
PROJECT_NAME="{{ project_name }}"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# Thresholds
CPU_THRESHOLD=80
MEMORY_THRESHOLD=80
DISK_THRESHOLD=85
LOAD_THRESHOLD=2.0

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Log function
log_message() {
    local level="$1"
    local message="$2"
    echo "[$TIMESTAMP] [$level] $message"
    logger -t system-monitor "[$level] $message"
}

# Check CPU usage
check_cpu() {
    local cpu_usage
    cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | sed 's/%us,//')
    cpu_usage=${cpu_usage%.*}  # Remove decimal part
    
    if [ "$cpu_usage" -gt "$CPU_THRESHOLD" ]; then
        log_message "ALERT" "High CPU usage: ${cpu_usage}%"
        return 1
    else
        log_message "INFO" "CPU usage: ${cpu_usage}%"
        return 0
    fi
}

# Check memory usage
check_memory() {
    local memory_info
    memory_info=$(free | grep Mem)
    local total
    local used
    local available
    
    total=$(echo "$memory_info" | awk '{print $2}')
    used=$(echo "$memory_info" | awk '{print $3}')
    available=$(echo "$memory_info" | awk '{print $7}')
    
    local memory_usage
    memory_usage=$((used * 100 / total))
    
    if [ "$memory_usage" -gt "$MEMORY_THRESHOLD" ]; then
        log_message "ALERT" "High memory usage: ${memory_usage}% (Used: ${used}KB, Available: ${available}KB)"
        return 1
    else
        log_message "INFO" "Memory usage: ${memory_usage}%"
        return 0
    fi
}

# Check disk usage
check_disk() {
    local alerts=0
    
    while IFS= read -r line; do
        local filesystem usage mountpoint
        filesystem=$(echo "$line" | awk '{print $1}')
        usage=$(echo "$line" | awk '{print $5}' | sed 's/%//')
        mountpoint=$(echo "$line" | awk '{print $6}')
        
        if [ "$usage" -gt "$DISK_THRESHOLD" ]; then
            log_message "ALERT" "High disk usage on $mountpoint: ${usage}%"
            ((alerts++))
        else
            log_message "INFO" "Disk usage on $mountpoint: ${usage}%"
        fi
    done < <(df -h | grep -vE '^Filesystem|tmpfs|cdrom|udev')
    
    return $alerts
}

# Check system load
check_load() {
    local load_avg
    load_avg=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
    
    if awk "BEGIN {exit !($load_avg > $LOAD_THRESHOLD)}"; then
        log_message "ALERT" "High system load: $load_avg"
        return 1
    else
        log_message "INFO" "System load: $load_avg"
        return 0
    fi
}

# Check running services
check_services() {
    local services_to_check=()
    
    # Add services based on server type
{% if 'webservers' in group_names %}
    services_to_check+=("nginx")
{% endif %}
{% if 'appservers' in group_names %}
    services_to_check+=("{{ app_name }}")
{% endif %}
    
    # Always check essential services
    services_to_check+=("ssh" "cron")
    
    local failed_services=0
    
    for service in "${services_to_check[@]}"; do
        if systemctl is-active --quiet "$service"; then
            log_message "INFO" "Service $service is running"
        else
            log_message "ALERT" "Service $service is not running"
            ((failed_services++))
        fi
    done
    
    return $failed_services
}

# Check network connectivity
check_network() {
    local test_hosts=("8.8.8.8" "1.1.1.1")
    local failed_tests=0
    
    for host in "${test_hosts[@]}"; do
        if ping -c 1 -W 3 "$host" >/dev/null 2>&1; then
            log_message "INFO" "Network connectivity to $host: OK"
        else
            log_message "ALERT" "Network connectivity to $host: FAILED"
            ((failed_tests++))
        fi
    done
    
    return $failed_tests
}

# Check file system permissions
check_permissions() {
    local critical_files=(
        "/etc/passwd:644"
        "/etc/shadow:640"
        "/etc/sudoers:440"
        "/etc/ssh/sshd_config:600"
    )
    
    local permission_issues=0
    
    for file_perm in "${critical_files[@]}"; do
        local file="${file_perm%:*}"
        local expected_perm="${file_perm#*:}"
        
        if [ -f "$file" ]; then
            local actual_perm
            actual_perm=$(stat -c "%a" "$file")
            
            if [ "$actual_perm" = "$expected_perm" ]; then
                log_message "INFO" "File permissions for $file: OK ($actual_perm)"
            else
                log_message "ALERT" "File permissions for $file: INCORRECT (Expected: $expected_perm, Actual: $actual_perm)"
                ((permission_issues++))
            fi
        else
            log_message "WARNING" "File $file does not exist"
        fi
    done
    
    return $permission_issues
}

# Check log file sizes
check_log_sizes() {
    local log_directories=("/var/log" "/var/log/{{ app_name | default('applications') }}")
    local large_logs=0
    local max_size=100  # MB
    
    for log_dir in "${log_directories[@]}"; do
        if [ -d "$log_dir" ]; then
            while IFS= read -r -d '' file; do
                local size_mb
                size_mb=$(du -m "$file" | cut -f1)
                
                if [ "$size_mb" -gt "$max_size" ]; then
                    log_message "WARNING" "Large log file: $file (${size_mb}MB)"
                    ((large_logs++))
                fi
            done < <(find "$log_dir" -name "*.log" -type f -print0 2>/dev/null)
        fi
    done
    
    return $large_logs
}

# Generate system report
generate_report() {
    log_message "INFO" "=== System Monitoring Report for $HOSTNAME ==="
    log_message "INFO" "Environment: $ENVIRONMENT"
    log_message "INFO" "Project: $PROJECT_NAME"
    log_message "INFO" "Timestamp: $TIMESTAMP"
    log_message "INFO" "Uptime: $(uptime -p)"
    
    # System information
    log_message "INFO" "OS: $(lsb_release -d | cut -f2)"
    log_message "INFO" "Kernel: $(uname -r)"
    log_message "INFO" "Architecture: $(uname -m)"
    
    # Resource usage summary
    local cpu_count
    cpu_count=$(nproc)
    log_message "INFO" "CPU Cores: $cpu_count"
    
    local total_memory
    total_memory=$(free -h | awk '/^Mem:/ {print $2}')
    log_message "INFO" "Total Memory: $total_memory"
    
    local disk_info
    disk_info=$(df -h / | tail -1 | awk '{print $2}')
    log_message "INFO" "Root Disk Size: $disk_info"
}

# Main execution
main() {
    local total_issues=0
    
    # Generate system report
    generate_report
    
    log_message "INFO" "Starting system health checks..."
    
    # Run all checks
    check_cpu || ((total_issues++))
    check_memory || ((total_issues++))
    check_disk || ((total_issues += $?))
    check_load || ((total_issues++))
    check_services || ((total_issues += $?))
    check_network || ((total_issues += $?))
    check_permissions || ((total_issues += $?))
    check_log_sizes || ((total_issues += $?))
    
    # Summary
    if [ $total_issues -eq 0 ]; then
        log_message "INFO" "System health check completed: All checks passed ✅"
        exit 0
    else
        log_message "ALERT" "System health check completed: $total_issues issue(s) found ⚠️"
        exit 1
    fi
}

# Execute main function
main "$@"
