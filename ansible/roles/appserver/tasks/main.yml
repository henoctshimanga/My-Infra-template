---
# Application server role tasks - configures Node.js application servers

- name: Install Node.js dependencies
  apt:
    name:
      - curl
      - software-properties-common
      - build-essential
      - python3-pip
    state: present
    update_cache: yes
  tags:
    - appserver
    - nodejs
    - packages

- name: Add NodeSource GPG key
  apt_key:
    url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
    state: present
  tags:
    - appserver
    - nodejs
    - packages

- name: Add NodeSource repository
  apt_repository:
    repo: "deb https://deb.nodesource.com/node_{{ nodejs_version }} {{ ansible_distribution_release }} main"
    state: present
    filename: nodesource
  tags:
    - appserver
    - nodejs
    - packages

- name: Install Node.js
  apt:
    name: nodejs
    state: present
    update_cache: yes
  tags:
    - appserver
    - nodejs
    - packages

- name: Install global npm packages
  npm:
    name: "{{ item }}"
    global: yes
    state: present
  loop: "{{ npm_global_packages }}"
  tags:
    - appserver
    - nodejs
    - packages

- name: Create application user
  user:
    name: "{{ app_user }}"
    group: "{{ app_group }}"
    home: "{{ app_home }}"
    shell: /bin/bash
    system: yes
    create_home: yes
  tags:
    - appserver
    - users

- name: Create application directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0755'
  loop:
    - "{{ app_home }}"
    - "{{ app_home }}/logs"
    - "{{ app_home }}/tmp"
    - /var/log/{{ app_name }}
    - /etc/{{ app_name }}
  tags:
    - appserver
    - directories

- name: Create sample Node.js application
  template:
    src: app.js.j2
    dest: "{{ app_home }}/app.js"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0644'
  notify: restart app
  tags:
    - appserver
    - application

- name: Create package.json for the application
  template:
    src: package.json.j2
    dest: "{{ app_home }}/package.json"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0644'
  notify: install npm dependencies
  tags:
    - appserver
    - application

- name: Install application dependencies
  npm:
    path: "{{ app_home }}"
    state: present
  become_user: "{{ app_user }}"
  tags:
    - appserver
    - application
    - packages

- name: Create application configuration file
  template:
    src: app-config.json.j2
    dest: "/etc/{{ app_name }}/config.json"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0600'
  notify: restart app
  tags:
    - appserver
    - application
    - config

- name: Create PM2 ecosystem configuration
  template:
    src: ecosystem.config.js.j2
    dest: "{{ app_home }}/ecosystem.config.js"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0644'
  notify: restart app
  tags:
    - appserver
    - pm2
    - config

- name: Create systemd service for PM2
  template:
    src: app.service.j2
    dest: "/etc/systemd/system/{{ app_name }}.service"
    owner: root
    group: root
    mode: '0644'
  notify: 
    - reload systemd
    - restart app
  tags:
    - appserver
    - systemd
    - services

- name: Create application startup script
  template:
    src: start-app.sh.j2
    dest: "{{ app_home }}/start-app.sh"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0755'
  tags:
    - appserver
    - application

- name: Create application health check script
  template:
    src: health-check.sh.j2
    dest: "{{ app_home }}/health-check.sh"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0755'
  tags:
    - appserver
    - monitoring

- name: Setup PM2 for application user
  shell: |
    su - {{ app_user }} -c "pm2 startup systemd -u {{ app_user }} --hp {{ app_home }}"
    systemctl enable {{ app_name }}
  args:
    creates: "/etc/systemd/system/{{ app_name }}.service"
  tags:
    - appserver
    - pm2
    - services

- name: Start and enable application service
  systemd:
    name: "{{ app_name }}"
    state: started
    enabled: yes
    daemon_reload: yes
  tags:
    - appserver
    - services

- name: Configure log rotation for application
  template:
    src: app-logrotate.j2
    dest: "/etc/logrotate.d/{{ app_name }}"
    owner: root
    group: root
    mode: '0644'
  tags:
    - appserver
    - logging

- name: Install application monitoring tools
  apt:
    name:
      - htop
      - iotop
      - nodejs-dev
    state: present
  when: enable_monitoring | default(true)
  tags:
    - appserver
    - monitoring
    - packages

- name: Create application monitoring script
  template:
    src: app-monitor.sh.j2
    dest: /opt/scripts/app-monitor.sh
    owner: root
    group: root
    mode: '0755'
  tags:
    - appserver
    - monitoring

- name: Setup application monitoring cron job
  cron:
    name: "Application monitoring"
    job: "/opt/scripts/app-monitor.sh >> /var/log/applications/app-monitor.log 2>&1"
    minute: "*/2"
    hour: "*"
    user: root
  when: enable_monitoring | default(true)
  tags:
    - appserver
    - monitoring
    - cron

- name: Configure firewall for application
  ufw:
    rule: allow
    port: "{{ app_port }}"
    proto: tcp
    src: "{{ vpc_cidr | default('10.0.0.0/16') }}"
  when: enable_firewall | default(true)
  tags:
    - appserver
    - firewall

- name: Create backup script for application data
  template:
    src: backup-app.sh.j2
    dest: /opt/scripts/backup-app.sh
    owner: root
    group: root
    mode: '0755'
  tags:
    - appserver
    - backup

- name: Setup application backup cron job
  cron:
    name: "Application backup"
    job: "/opt/scripts/backup-app.sh >> /var/log/applications/backup.log 2>&1"
    minute: "0"
    hour: "2"
    user: root
  when: enable_backups | default(true)
  tags:
    - appserver
    - backup
    - cron

