# Static inventory file for Ansible
# This serves as a template and fallback when dynamic inventory is not available

all:
  vars:
    # Global variables
    environment: dev
    project_name: iac-solution
    aws_region: us-west-2
    
    # SSH configuration
    ansible_user: ubuntu
    ansible_ssh_private_key_file: ~/.ssh/id_rsa
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    
    # Python interpreter
    ansible_python_interpreter: /usr/bin/python3
    
    # Common packages
    common_packages:
      - httpd
      - vim
      - curl
      - wget
      - unzip
      - git
      - awscli
      - python3-pip
    
    # Security settings
    enable_firewall: true
    enable_fail2ban: true
    ssh_port: 22
    
    # Monitoring settings
    enable_monitoring: true
    log_retention_days: 7

  children:
    webservers:
      hosts:
        # These will be populated by dynamic inventory or manually
        # Example:
        # web-1:
        #   ansible_host: 1.2.3.4
        # web-2:
        #   ansible_host: 1.2.3.5
      vars:
        server_type: webserver
        nginx_worker_processes: auto
        nginx_worker_connections: 1024
        nginx_client_max_body_size: 10m
        
        # SSL configuration
        ssl_protocols: "TLSv1.2 TLSv1.3"
        ssl_prefer_server_ciphers: false
        
        # Security headers
        security_headers:
          - "X-Frame-Options: DENY"
          - "X-Content-Type-Options: nosniff"
          - "X-XSS-Protection: 1; mode=block"
          - "Referrer-Policy: strict-origin-when-cross-origin"
        
        # Health check
        health_check_url: "/health"
        health_check_port: 8080
        
    appservers:
      hosts:
        # These will be populated by dynamic inventory or manually
        # Example:
        # app-1:
        #   ansible_host: 10.0.1.10
        # app-2:
        #   ansible_host: 10.0.1.11
      vars:
        server_type: appserver
        
        # Node.js configuration
        nodejs_version: "18.x"
        npm_registry: "https://registry.npmjs.org/"
        
        # Application configuration
        app_name: iac-solution-app
        app_port: 3000
        app_user: app
        app_group: app
        app_home: "/opt/{{ app_name }}"
        
        # PM2 configuration
        pm2_user: "{{ app_user }}"
        pm2_home: "/home/{{ app_user }}/.pm2"
        
        # Environment variables
        node_env: "{{ environment }}"
        log_level: info
        
    databases:
      hosts:
        # This will be populated for RDS instances by dynamic inventory
        # Example:
        # database:
        #   ansible_host: mydb.cluster-xyz.us-west-2.rds.amazonaws.com
      vars:
        server_type: database
        
        # Database configuration (for RDS monitoring/management)
        db_engine: postgres
        db_port: 5432
        db_name: "{{ environment }}db"
        
        # Monitoring configuration
        enable_db_monitoring: true
        backup_retention_days: 7
        
        # Tools and utilities
        db_client_packages:
          - postgresql-client
          - python3-psycopg2
          - python3-boto3
          
    # Management/Bastion hosts
    management:
      hosts:
        # Bastion or jump hosts would go here
      vars:
        server_type: management
        
        # Additional tools for management hosts
        management_packages:
          - terraform
          - ansible
          - awscli
          - jq
          - tree
          
    # Load balancers (if using EC2-based load balancers)
    loadbalancers:
      hosts:
        # EC2-based load balancers would go here
        # AWS ALB/NLB are managed services and don't appear in inventory
      vars:
        server_type: loadbalancer

# Example of environment-specific inventory structure
# You would typically have separate inventory files for each environment:
# - inventory/dev/hosts.yml
# - inventory/staging/hosts.yml  
# - inventory/prod/hosts.yml

